package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VoucherLinesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherLinesAllPropertiesEquals(VoucherLines expected, VoucherLines actual) {
        assertVoucherLinesAutoGeneratedPropertiesEquals(expected, actual);
        assertVoucherLinesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherLinesAllUpdatablePropertiesEquals(VoucherLines expected, VoucherLines actual) {
        assertVoucherLinesUpdatableFieldsEquals(expected, actual);
        assertVoucherLinesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherLinesAutoGeneratedPropertiesEquals(VoucherLines expected, VoucherLines actual) {
        assertThat(expected)
            .as("Verify VoucherLines auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherLinesUpdatableFieldsEquals(VoucherLines expected, VoucherLines actual) {
        assertThat(expected)
            .as("Verify VoucherLines relevant properties")
            .satisfies(e -> assertThat(e.getLineID()).as("check lineID").isEqualTo(actual.getLineID()))
            .satisfies(e -> assertThat(e.getGrnCode()).as("check grnCode").isEqualTo(actual.getGrnCode()))
            .satisfies(e -> assertThat(e.getGrnType()).as("check grnType").isEqualTo(actual.getGrnType()))
            .satisfies(e -> assertThat(e.getOriginalAmount()).as("check originalAmount").isEqualTo(actual.getOriginalAmount()))
            .satisfies(e -> assertThat(e.getAmountOwing()).as("check amountOwing").isEqualTo(actual.getAmountOwing()))
            .satisfies(e -> assertThat(e.getDiscountAvailable()).as("check discountAvailable").isEqualTo(actual.getDiscountAvailable()))
            .satisfies(e -> assertThat(e.getDiscountTaken()).as("check discountTaken").isEqualTo(actual.getDiscountTaken()))
            .satisfies(e -> assertThat(e.getAmountReceived()).as("check amountReceived").isEqualTo(actual.getAmountReceived()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getAccountId()).as("check accountId").isEqualTo(actual.getAccountId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherLinesUpdatableRelationshipsEquals(VoucherLines expected, VoucherLines actual) {
        // empty method
    }
}
