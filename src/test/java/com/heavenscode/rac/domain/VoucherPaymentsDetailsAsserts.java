package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VoucherPaymentsDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherPaymentsDetailsAllPropertiesEquals(VoucherPaymentsDetails expected, VoucherPaymentsDetails actual) {
        assertVoucherPaymentsDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertVoucherPaymentsDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherPaymentsDetailsAllUpdatablePropertiesEquals(
        VoucherPaymentsDetails expected,
        VoucherPaymentsDetails actual
    ) {
        assertVoucherPaymentsDetailsUpdatableFieldsEquals(expected, actual);
        assertVoucherPaymentsDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherPaymentsDetailsAutoGeneratedPropertiesEquals(
        VoucherPaymentsDetails expected,
        VoucherPaymentsDetails actual
    ) {
        assertThat(expected)
            .as("Verify VoucherPaymentsDetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherPaymentsDetailsUpdatableFieldsEquals(VoucherPaymentsDetails expected, VoucherPaymentsDetails actual) {
        assertThat(expected)
            .as("Verify VoucherPaymentsDetails relevant properties")
            .satisfies(e -> assertThat(e.getLineID()).as("check lineID").isEqualTo(actual.getLineID()))
            .satisfies(e -> assertThat(e.getPaymentAmount()).as("check paymentAmount").isEqualTo(actual.getPaymentAmount()))
            .satisfies(e -> assertThat(e.getTotalVoucherAmount()).as("check totalVoucherAmount").isEqualTo(actual.getTotalVoucherAmount()))
            .satisfies(e -> assertThat(e.getCheckqueAmount()).as("check checkqueAmount").isEqualTo(actual.getCheckqueAmount()))
            .satisfies(e -> assertThat(e.getCheckqueNo()).as("check checkqueNo").isEqualTo(actual.getCheckqueNo()))
            .satisfies(e -> assertThat(e.getCheckqueDate()).as("check checkqueDate").isEqualTo(actual.getCheckqueDate()))
            .satisfies(e -> assertThat(e.getCheckqueExpireDate()).as("check checkqueExpireDate").isEqualTo(actual.getCheckqueExpireDate()))
            .satisfies(e -> assertThat(e.getBankName()).as("check bankName").isEqualTo(actual.getBankName()))
            .satisfies(e -> assertThat(e.getBankID()).as("check bankID").isEqualTo(actual.getBankID()))
            .satisfies(e -> assertThat(e.getCreditCardNo()).as("check creditCardNo").isEqualTo(actual.getCreditCardNo()))
            .satisfies(e -> assertThat(e.getCreditCardAmount()).as("check creditCardAmount").isEqualTo(actual.getCreditCardAmount()))
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getOtherDetails()).as("check otherDetails").isEqualTo(actual.getOtherDetails()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getTermID()).as("check termID").isEqualTo(actual.getTermID()))
            .satisfies(e -> assertThat(e.getTermName()).as("check termName").isEqualTo(actual.getTermName()))
            .satisfies(e -> assertThat(e.getAccountNo()).as("check accountNo").isEqualTo(actual.getAccountNo()))
            .satisfies(e -> assertThat(e.getAccountNumber()).as("check accountNumber").isEqualTo(actual.getAccountNumber()))
            .satisfies(e -> assertThat(e.getAccountId()).as("check accountId").isEqualTo(actual.getAccountId()))
            .satisfies(e -> assertThat(e.getAccountCode()).as("check accountCode").isEqualTo(actual.getAccountCode()))
            .satisfies(e -> assertThat(e.getChequeStatusId()).as("check chequeStatusId").isEqualTo(actual.getChequeStatusId()))
            .satisfies(e -> assertThat(e.getIsDeposit()).as("check isDeposit").isEqualTo(actual.getIsDeposit()))
            .satisfies(e -> assertThat(e.getDepositedDate()).as("check depositedDate").isEqualTo(actual.getDepositedDate()))
            .satisfies(e -> assertThat(e.getCompanyBankId()).as("check companyBankId").isEqualTo(actual.getCompanyBankId()))
            .satisfies(
                e -> assertThat(e.getIsBankReconciliation()).as("check isBankReconciliation").isEqualTo(actual.getIsBankReconciliation())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoucherPaymentsDetailsUpdatableRelationshipsEquals(
        VoucherPaymentsDetails expected,
        VoucherPaymentsDetails actual
    ) {
        // empty method
    }
}
