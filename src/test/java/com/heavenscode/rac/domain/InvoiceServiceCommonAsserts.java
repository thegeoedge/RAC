package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InvoiceServiceCommonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceServiceCommonAllPropertiesEquals(InvoiceServiceCommon expected, InvoiceServiceCommon actual) {
        assertInvoiceServiceCommonAutoGeneratedPropertiesEquals(expected, actual);
        assertInvoiceServiceCommonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceServiceCommonAllUpdatablePropertiesEquals(InvoiceServiceCommon expected, InvoiceServiceCommon actual) {
        assertInvoiceServiceCommonUpdatableFieldsEquals(expected, actual);
        assertInvoiceServiceCommonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceServiceCommonAutoGeneratedPropertiesEquals(InvoiceServiceCommon expected, InvoiceServiceCommon actual) {
        assertThat(expected)
            .as("Verify InvoiceServiceCommon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceServiceCommonUpdatableFieldsEquals(InvoiceServiceCommon expected, InvoiceServiceCommon actual) {
        assertThat(expected)
            .as("Verify InvoiceServiceCommon relevant properties")
            .satisfies(e -> assertThat(e.getInvoiceId()).as("check invoiceId").isEqualTo(actual.getInvoiceId()))
            .satisfies(e -> assertThat(e.getLineId()).as("check lineId").isEqualTo(actual.getLineId()))
            .satisfies(e -> assertThat(e.getOptionId()).as("check optionId").isEqualTo(actual.getOptionId()))
            .satisfies(e -> assertThat(e.getMainId()).as("check mainId").isEqualTo(actual.getMainId()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getValue()).as("check value").isEqualTo(actual.getValue()))
            .satisfies(e -> assertThat(e.getAddedById()).as("check addedById").isEqualTo(actual.getAddedById()))
            .satisfies(e -> assertThat(e.getDiscount()).as("check discount").isEqualTo(actual.getDiscount()))
            .satisfies(e -> assertThat(e.getServicePrice()).as("check servicePrice").isEqualTo(actual.getServicePrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceServiceCommonUpdatableRelationshipsEquals(InvoiceServiceCommon expected, InvoiceServiceCommon actual) {
        // empty method
    }
}
