package com.heavenscode.rac.domain;

import static com.heavenscode.rac.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SalesInvoiceLineBatchAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceLineBatchAllPropertiesEquals(SalesInvoiceLineBatch expected, SalesInvoiceLineBatch actual) {
        assertSalesInvoiceLineBatchAutoGeneratedPropertiesEquals(expected, actual);
        assertSalesInvoiceLineBatchAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceLineBatchAllUpdatablePropertiesEquals(
        SalesInvoiceLineBatch expected,
        SalesInvoiceLineBatch actual
    ) {
        assertSalesInvoiceLineBatchUpdatableFieldsEquals(expected, actual);
        assertSalesInvoiceLineBatchUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceLineBatchAutoGeneratedPropertiesEquals(
        SalesInvoiceLineBatch expected,
        SalesInvoiceLineBatch actual
    ) {
        assertThat(expected)
            .as("Verify SalesInvoiceLineBatch auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceLineBatchUpdatableFieldsEquals(SalesInvoiceLineBatch expected, SalesInvoiceLineBatch actual) {
        assertThat(expected)
            .as("Verify SalesInvoiceLineBatch relevant properties")
            .satisfies(e -> assertThat(e.getLineId()).as("check lineId").isEqualTo(actual.getLineId()))
            .satisfies(e -> assertThat(e.getBatchLineId()).as("check batchLineId").isEqualTo(actual.getBatchLineId()))
            .satisfies(e -> assertThat(e.getItemId()).as("check itemId").isEqualTo(actual.getItemId()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getBatchId()).as("check batchId").isEqualTo(actual.getBatchId()))
            .satisfies(e -> assertThat(e.getBatchCode()).as("check batchCode").isEqualTo(actual.getBatchCode()))
            .satisfies(e -> assertThat(e.getTxDate()).as("check txDate").isEqualTo(actual.getTxDate()))
            .satisfies(e -> assertThat(e.getManufactureDate()).as("check manufactureDate").isEqualTo(actual.getManufactureDate()))
            .satisfies(e -> assertThat(e.getExpiredDate()).as("check expiredDate").isEqualTo(actual.getExpiredDate()))
            .satisfies(e -> assertThat(e.getQty()).as("check qty").isEqualTo(actual.getQty()))
            .satisfies(e -> assertThat(e.getCost()).as("check cost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCost()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getNbt()).as("check nbt").isEqualTo(actual.getNbt()))
            .satisfies(e -> assertThat(e.getVat()).as("check vat").isEqualTo(actual.getVat()))
            .satisfies(e -> assertThat(e.getAddedById()).as("check addedById").isEqualTo(actual.getAddedById()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceLineBatchUpdatableRelationshipsEquals(
        SalesInvoiceLineBatch expected,
        SalesInvoiceLineBatch actual
    ) {
        // empty method
    }
}
