package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SalesInvoiceDummyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceDummyAllPropertiesEquals(SalesInvoiceDummy expected, SalesInvoiceDummy actual) {
        assertSalesInvoiceDummyAutoGeneratedPropertiesEquals(expected, actual);
        assertSalesInvoiceDummyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceDummyAllUpdatablePropertiesEquals(SalesInvoiceDummy expected, SalesInvoiceDummy actual) {
        assertSalesInvoiceDummyUpdatableFieldsEquals(expected, actual);
        assertSalesInvoiceDummyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceDummyAutoGeneratedPropertiesEquals(SalesInvoiceDummy expected, SalesInvoiceDummy actual) {
        assertThat(expected)
            .as("Verify SalesInvoiceDummy auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceDummyUpdatableFieldsEquals(SalesInvoiceDummy expected, SalesInvoiceDummy actual) {
        assertThat(expected)
            .as("Verify SalesInvoiceDummy relevant properties")
            .satisfies(e -> assertThat(e.getOriginalInvoiceId()).as("check originalInvoiceId").isEqualTo(actual.getOriginalInvoiceId()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getInvoiceDate()).as("check invoiceDate").isEqualTo(actual.getInvoiceDate()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getQuoteID()).as("check quoteID").isEqualTo(actual.getQuoteID()))
            .satisfies(e -> assertThat(e.getOrderID()).as("check orderID").isEqualTo(actual.getOrderID()))
            .satisfies(e -> assertThat(e.getDeliveryDate()).as("check deliveryDate").isEqualTo(actual.getDeliveryDate()))
            .satisfies(e -> assertThat(e.getSalesRepID()).as("check salesRepID").isEqualTo(actual.getSalesRepID()))
            .satisfies(e -> assertThat(e.getSalesRepName()).as("check salesRepName").isEqualTo(actual.getSalesRepName()))
            .satisfies(e -> assertThat(e.getDeliverFrom()).as("check deliverFrom").isEqualTo(actual.getDeliverFrom()))
            .satisfies(e -> assertThat(e.getCustomerID()).as("check customerID").isEqualTo(actual.getCustomerID()))
            .satisfies(e -> assertThat(e.getCustomerName()).as("check customerName").isEqualTo(actual.getCustomerName()))
            .satisfies(e -> assertThat(e.getCustomerAddress()).as("check customerAddress").isEqualTo(actual.getCustomerAddress()))
            .satisfies(e -> assertThat(e.getDeliveryAddress()).as("check deliveryAddress").isEqualTo(actual.getDeliveryAddress()))
            .satisfies(e -> assertThat(e.getSubTotal()).as("check subTotal").isEqualTo(actual.getSubTotal()))
            .satisfies(e -> assertThat(e.getTotalTax()).as("check totalTax").isEqualTo(actual.getTotalTax()))
            .satisfies(e -> assertThat(e.getTotalDiscount()).as("check totalDiscount").isEqualTo(actual.getTotalDiscount()))
            .satisfies(e -> assertThat(e.getNetTotal()).as("check netTotal").isEqualTo(actual.getNetTotal()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getPaidAmount()).as("check paidAmount").isEqualTo(actual.getPaidAmount()))
            .satisfies(e -> assertThat(e.getAmountOwing()).as("check amountOwing").isEqualTo(actual.getAmountOwing()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getLocationID()).as("check locationID").isEqualTo(actual.getLocationID()))
            .satisfies(e -> assertThat(e.getLocationCode()).as("check locationCode").isEqualTo(actual.getLocationCode()))
            .satisfies(e -> assertThat(e.getReferenceCode()).as("check referenceCode").isEqualTo(actual.getReferenceCode()))
            .satisfies(e -> assertThat(e.getCreatedById()).as("check createdById").isEqualTo(actual.getCreatedById()))
            .satisfies(e -> assertThat(e.getCreatedByName()).as("check createdByName").isEqualTo(actual.getCreatedByName()))
            .satisfies(e -> assertThat(e.getAutoCareCharges()).as("check autoCareCharges").isEqualTo(actual.getAutoCareCharges()))
            .satisfies(e -> assertThat(e.getAutoCareJobId()).as("check autoCareJobId").isEqualTo(actual.getAutoCareJobId()))
            .satisfies(e -> assertThat(e.getVehicleNo()).as("check vehicleNo").isEqualTo(actual.getVehicleNo()))
            .satisfies(e -> assertThat(e.getNbtAmount()).as("check nbtAmount").isEqualTo(actual.getNbtAmount()))
            .satisfies(e -> assertThat(e.getVatAmount()).as("check vatAmount").isEqualTo(actual.getVatAmount()))
            .satisfies(e -> assertThat(e.getDummyCommission()).as("check dummyCommission").isEqualTo(actual.getDummyCommission()))
            .satisfies(e -> assertThat(e.getCommissionPaidDate()).as("check commissionPaidDate").isEqualTo(actual.getCommissionPaidDate()))
            .satisfies(e -> assertThat(e.getPaidCommission()).as("check paidCommission").isEqualTo(actual.getPaidCommission()))
            .satisfies(e -> assertThat(e.getPaidBy()).as("check paidBy").isEqualTo(actual.getPaidBy()))
            .satisfies(
                e -> assertThat(e.getOriginalInvoiceCode()).as("check originalInvoiceCode").isEqualTo(actual.getOriginalInvoiceCode())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesInvoiceDummyUpdatableRelationshipsEquals(SalesInvoiceDummy expected, SalesInvoiceDummy actual) {
        // empty method
    }
}
