package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BinCardAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinCardAllPropertiesEquals(BinCard expected, BinCard actual) {
        assertBinCardAutoGeneratedPropertiesEquals(expected, actual);
        assertBinCardAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinCardAllUpdatablePropertiesEquals(BinCard expected, BinCard actual) {
        assertBinCardUpdatableFieldsEquals(expected, actual);
        assertBinCardUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinCardAutoGeneratedPropertiesEquals(BinCard expected, BinCard actual) {
        assertThat(actual)
            .as("Verify BinCard auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinCardUpdatableFieldsEquals(BinCard expected, BinCard actual) {
        assertThat(actual)
            .as("Verify BinCard relevant properties")
            .satisfies(a -> assertThat(a.getItemID()).as("check itemID").isEqualTo(expected.getItemID()))
            .satisfies(a -> assertThat(a.getItemCode()).as("check itemCode").isEqualTo(expected.getItemCode()))
            .satisfies(a -> assertThat(a.getReference()).as("check reference").isEqualTo(expected.getReference()))
            .satisfies(a -> assertThat(a.getTxDate()).as("check txDate").isEqualTo(expected.getTxDate()))
            .satisfies(a -> assertThat(a.getQtyIn()).as("check qtyIn").isEqualTo(expected.getQtyIn()))
            .satisfies(a -> assertThat(a.getQtyOut()).as("check qtyOut").isEqualTo(expected.getQtyOut()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getlMU()).as("check lMU").isEqualTo(expected.getlMU()))
            .satisfies(a -> assertThat(a.getlMD()).as("check lMD").isEqualTo(expected.getlMD()))
            .satisfies(a -> assertThat(a.getReferenceCode()).as("check referenceCode").isEqualTo(expected.getReferenceCode()))
            .satisfies(a -> assertThat(a.getRecordDate()).as("check recordDate").isEqualTo(expected.getRecordDate()))
            .satisfies(a -> assertThat(a.getBatchId()).as("check batchId").isEqualTo(expected.getBatchId()))
            .satisfies(a -> assertThat(a.getLocationID()).as("check locationID").isEqualTo(expected.getLocationID()))
            .satisfies(a -> assertThat(a.getLocationCode()).as("check locationCode").isEqualTo(expected.getLocationCode()))
            .satisfies(a -> assertThat(a.getOpening()).as("check opening").isEqualTo(expected.getOpening()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getReferenceDoc()).as("check referenceDoc").isEqualTo(expected.getReferenceDoc()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinCardUpdatableRelationshipsEquals(BinCard expected, BinCard actual) {
        // empty method
    }
}
