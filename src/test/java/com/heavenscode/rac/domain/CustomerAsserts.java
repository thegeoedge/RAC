package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAllPropertiesEquals(Customer expected, Customer actual) {
        assertCustomerAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAllUpdatablePropertiesEquals(Customer expected, Customer actual) {
        assertCustomerUpdatableFieldsEquals(expected, actual);
        assertCustomerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerAutoGeneratedPropertiesEquals(Customer expected, Customer actual) {
        assertThat(actual)
            .as("Verify Customer auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerUpdatableFieldsEquals(Customer expected, Customer actual) {
        assertThat(actual)
            .as("Verify Customer relevant properties")
            .satisfies(a -> assertThat(a.getCustomertype()).as("check customertype").isEqualTo(expected.getCustomertype()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getNamewithinitials()).as("check namewithinitials").isEqualTo(expected.getNamewithinitials()))
            .satisfies(a -> assertThat(a.getFullname()).as("check fullname").isEqualTo(expected.getFullname()))
            .satisfies(a -> assertThat(a.getCallingname()).as("check callingname").isEqualTo(expected.getCallingname()))
            .satisfies(a -> assertThat(a.getNicno()).as("check nicno").isEqualTo(expected.getNicno()))
            .satisfies(a -> assertThat(a.getNicissueddate()).as("check nicissueddate").isEqualTo(expected.getNicissueddate()))
            .satisfies(a -> assertThat(a.getDateofbirth()).as("check dateofbirth").isEqualTo(expected.getDateofbirth()))
            .satisfies(a -> assertThat(a.getBloodgroup()).as("check bloodgroup").isEqualTo(expected.getBloodgroup()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getMaritalstatus()).as("check maritalstatus").isEqualTo(expected.getMaritalstatus()))
            .satisfies(a -> assertThat(a.getMarrieddate()).as("check marrieddate").isEqualTo(expected.getMarrieddate()))
            .satisfies(a -> assertThat(a.getNationality()).as("check nationality").isEqualTo(expected.getNationality()))
            .satisfies(a -> assertThat(a.getTerritory()).as("check territory").isEqualTo(expected.getTerritory()))
            .satisfies(a -> assertThat(a.getReligion()).as("check religion").isEqualTo(expected.getReligion()))
            .satisfies(a -> assertThat(a.getTeam()).as("check team").isEqualTo(expected.getTeam()))
            .satisfies(a -> assertThat(a.getBusinessname()).as("check businessname").isEqualTo(expected.getBusinessname()))
            .satisfies(a -> assertThat(a.getBusinessregdate()).as("check businessregdate").isEqualTo(expected.getBusinessregdate()))
            .satisfies(a -> assertThat(a.getBusinessregno()).as("check businessregno").isEqualTo(expected.getBusinessregno()))
            .satisfies(
                a -> assertThat(a.getProfilepicturepath()).as("check profilepicturepath").isEqualTo(expected.getProfilepicturepath())
            )
            .satisfies(a -> assertThat(a.getResidencehouseno()).as("check residencehouseno").isEqualTo(expected.getResidencehouseno()))
            .satisfies(a -> assertThat(a.getResidenceaddress()).as("check residenceaddress").isEqualTo(expected.getResidenceaddress()))
            .satisfies(a -> assertThat(a.getResidencecity()).as("check residencecity").isEqualTo(expected.getResidencecity()))
            .satisfies(a -> assertThat(a.getResidencephone()).as("check residencephone").isEqualTo(expected.getResidencephone()))
            .satisfies(
                a -> assertThat(a.getBusinesslocationno()).as("check businesslocationno").isEqualTo(expected.getBusinesslocationno())
            )
            .satisfies(a -> assertThat(a.getBusinessaddress()).as("check businessaddress").isEqualTo(expected.getBusinessaddress()))
            .satisfies(a -> assertThat(a.getBusinesscity()).as("check businesscity").isEqualTo(expected.getBusinesscity()))
            .satisfies(a -> assertThat(a.getBusinessphone1()).as("check businessphone1").isEqualTo(expected.getBusinessphone1()))
            .satisfies(a -> assertThat(a.getBusinessphone2()).as("check businessphone2").isEqualTo(expected.getBusinessphone2()))
            .satisfies(a -> assertThat(a.getBusinessmobile()).as("check businessmobile").isEqualTo(expected.getBusinessmobile()))
            .satisfies(a -> assertThat(a.getBusinessfax()).as("check businessfax").isEqualTo(expected.getBusinessfax()))
            .satisfies(a -> assertThat(a.getBusinessemail()).as("check businessemail").isEqualTo(expected.getBusinessemail()))
            .satisfies(
                a -> assertThat(a.getBusinessprovinceid()).as("check businessprovinceid").isEqualTo(expected.getBusinessprovinceid())
            )
            .satisfies(
                a -> assertThat(a.getBusinessdistrictid()).as("check businessdistrictid").isEqualTo(expected.getBusinessdistrictid())
            )
            .satisfies(a -> assertThat(a.getContactpersonname()).as("check contactpersonname").isEqualTo(expected.getContactpersonname()))
            .satisfies(
                a -> assertThat(a.getContactpersonphone()).as("check contactpersonphone").isEqualTo(expected.getContactpersonphone())
            )
            .satisfies(
                a -> assertThat(a.getContactpersonmobile()).as("check contactpersonmobile").isEqualTo(expected.getContactpersonmobile())
            )
            .satisfies(
                a -> assertThat(a.getContactpersonemail()).as("check contactpersonemail").isEqualTo(expected.getContactpersonemail())
            )
            .satisfies(a -> assertThat(a.getRootmappath()).as("check rootmappath").isEqualTo(expected.getRootmappath()))
            .satisfies(a -> assertThat(a.getWebsite()).as("check website").isEqualTo(expected.getWebsite()))
            .satisfies(a -> assertThat(a.getRegistrationdate()).as("check registrationdate").isEqualTo(expected.getRegistrationdate()))
            .satisfies(a -> assertThat(a.getIsactive()).as("check isactive").isEqualTo(expected.getIsactive()))
            .satisfies(
                a -> assertThat(a.getIsinternalcustomer()).as("check isinternalcustomer").isEqualTo(expected.getIsinternalcustomer())
            )
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getLmu()).as("check lmu").isEqualTo(expected.getLmu()))
            .satisfies(a -> assertThat(a.getLmd()).as("check lmd").isEqualTo(expected.getLmd()))
            .satisfies(a -> assertThat(a.getMaximumdiscount()).as("check maximumdiscount").isEqualTo(expected.getMaximumdiscount()))
            .satisfies(a -> assertThat(a.getCreditlimit()).as("check creditlimit").isEqualTo(expected.getCreditlimit()))
            .satisfies(
                a -> assertThat(a.getHassecuritydeposit()).as("check hassecuritydeposit").isEqualTo(expected.getHassecuritydeposit())
            )
            .satisfies(
                a ->
                    assertThat(a.getSecuritydepositamount())
                        .as("check securitydepositamount")
                        .isEqualTo(expected.getSecuritydepositamount())
            )
            .satisfies(a -> assertThat(a.getPaybycash()).as("check paybycash").isEqualTo(expected.getPaybycash()))
            .satisfies(
                a ->
                    assertThat(a.getCashpaymentbeforeload())
                        .as("check cashpaymentbeforeload")
                        .isEqualTo(expected.getCashpaymentbeforeload())
            )
            .satisfies(
                a ->
                    assertThat(a.getCashlastinvoicebeforeload())
                        .as("check cashlastinvoicebeforeload")
                        .isEqualTo(expected.getCashlastinvoicebeforeload())
            )
            .satisfies(a -> assertThat(a.getPaybycredit()).as("check paybycredit").isEqualTo(expected.getPaybycredit()))
            .satisfies(
                a -> assertThat(a.getCreditoneweekcheck()).as("check creditoneweekcheck").isEqualTo(expected.getCreditoneweekcheck())
            )
            .satisfies(
                a -> assertThat(a.getCreditpaymentbydays()).as("check creditpaymentbydays").isEqualTo(expected.getCreditpaymentbydays())
            )
            .satisfies(
                a -> assertThat(a.getHaspurchasingdeposit()).as("check haspurchasingdeposit").isEqualTo(expected.getHaspurchasingdeposit())
            )
            .satisfies(
                a ->
                    assertThat(a.getHassecuritydepositbond())
                        .as("check hassecuritydepositbond")
                        .isEqualTo(expected.getHassecuritydepositbond())
            )
            .satisfies(a -> assertThat(a.getHasassestsdeposit()).as("check hasassestsdeposit").isEqualTo(expected.getHasassestsdeposit()))
            .satisfies(
                a -> assertThat(a.getCustomerrootmappath()).as("check customerrootmappath").isEqualTo(expected.getCustomerrootmappath())
            )
            .satisfies(a -> assertThat(a.getEmployername()).as("check employername").isEqualTo(expected.getEmployername()))
            .satisfies(a -> assertThat(a.getEmployeraddress()).as("check employeraddress").isEqualTo(expected.getEmployeraddress()))
            .satisfies(a -> assertThat(a.getEmployerphone()).as("check employerphone").isEqualTo(expected.getEmployerphone()))
            .satisfies(
                a -> assertThat(a.getEmployerdesignation()).as("check employerdesignation").isEqualTo(expected.getEmployerdesignation())
            )
            .satisfies(
                a -> assertThat(a.getPreviousemployername()).as("check previousemployername").isEqualTo(expected.getPreviousemployername())
            )
            .satisfies(
                a ->
                    assertThat(a.getPreviousemployeraddress())
                        .as("check previousemployeraddress")
                        .isEqualTo(expected.getPreviousemployeraddress())
            )
            .satisfies(a -> assertThat(a.getPreviousindustry()).as("check previousindustry").isEqualTo(expected.getPreviousindustry()))
            .satisfies(a -> assertThat(a.getPreviousperiod()).as("check previousperiod").isEqualTo(expected.getPreviousperiod()))
            .satisfies(a -> assertThat(a.getPreviouspositions()).as("check previouspositions").isEqualTo(expected.getPreviouspositions()))
            .satisfies(
                a ->
                    assertThat(a.getPreviousresionforleaving())
                        .as("check previousresionforleaving")
                        .isEqualTo(expected.getPreviousresionforleaving())
            )
            .satisfies(a -> assertThat(a.getHascreaditlimit()).as("check hascreaditlimit").isEqualTo(expected.getHascreaditlimit()))
            .satisfies(a -> assertThat(a.getAccountid()).as("check accountid").isEqualTo(expected.getAccountid()))
            .satisfies(a -> assertThat(a.getAccountcode()).as("check accountcode").isEqualTo(expected.getAccountcode()))
            .satisfies(a -> assertThat(a.getIsregistered()).as("check isregistered").isEqualTo(expected.getIsregistered()))
            .satisfies(a -> assertThat(a.getVatregnumber()).as("check vatregnumber").isEqualTo(expected.getVatregnumber()))
            .satisfies(a -> assertThat(a.getTinnumber()).as("check tinnumber").isEqualTo(expected.getTinnumber()))
            .satisfies(a -> assertThat(a.getLat()).as("check lat").isEqualTo(expected.getLat()))
            .satisfies(a -> assertThat(a.getLon()).as("check lon").isEqualTo(expected.getLon()))
            .satisfies(a -> assertThat(a.getCreditperiod()).as("check creditperiod").isEqualTo(expected.getCreditperiod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerUpdatableRelationshipsEquals(Customer expected, Customer actual) {
        // empty method
    }
}
