package com.heavenscode.rac.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReceiptpaymentsdetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptpaymentsdetailsAllPropertiesEquals(Receiptpaymentsdetails expected, Receiptpaymentsdetails actual) {
        assertReceiptpaymentsdetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertReceiptpaymentsdetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptpaymentsdetailsAllUpdatablePropertiesEquals(
        Receiptpaymentsdetails expected,
        Receiptpaymentsdetails actual
    ) {
        assertReceiptpaymentsdetailsUpdatableFieldsEquals(expected, actual);
        assertReceiptpaymentsdetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptpaymentsdetailsAutoGeneratedPropertiesEquals(
        Receiptpaymentsdetails expected,
        Receiptpaymentsdetails actual
    ) {
        assertThat(expected)
            .as("Verify Receiptpaymentsdetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptpaymentsdetailsUpdatableFieldsEquals(Receiptpaymentsdetails expected, Receiptpaymentsdetails actual) {
        assertThat(expected)
            .as("Verify Receiptpaymentsdetails relevant properties")
            .satisfies(e -> assertThat(e.getLineid()).as("check lineid").isEqualTo(actual.getLineid()))
            .satisfies(e -> assertThat(e.getPaymentamount()).as("check paymentamount").isEqualTo(actual.getPaymentamount()))
            .satisfies(e -> assertThat(e.getTotalreceiptamount()).as("check totalreceiptamount").isEqualTo(actual.getTotalreceiptamount()))
            .satisfies(e -> assertThat(e.getCheckqueamount()).as("check checkqueamount").isEqualTo(actual.getCheckqueamount()))
            .satisfies(e -> assertThat(e.getCheckqueno()).as("check checkqueno").isEqualTo(actual.getCheckqueno()))
            .satisfies(e -> assertThat(e.getCheckquedate()).as("check checkquedate").isEqualTo(actual.getCheckquedate()))
            .satisfies(e -> assertThat(e.getCheckqueexpiredate()).as("check checkqueexpiredate").isEqualTo(actual.getCheckqueexpiredate()))
            .satisfies(e -> assertThat(e.getBankname()).as("check bankname").isEqualTo(actual.getBankname()))
            .satisfies(e -> assertThat(e.getBankid()).as("check bankid").isEqualTo(actual.getBankid()))
            .satisfies(e -> assertThat(e.getBankbranchname()).as("check bankbranchname").isEqualTo(actual.getBankbranchname()))
            .satisfies(e -> assertThat(e.getBankbranchid()).as("check bankbranchid").isEqualTo(actual.getBankbranchid()))
            .satisfies(e -> assertThat(e.getCreditcardno()).as("check creditcardno").isEqualTo(actual.getCreditcardno()))
            .satisfies(e -> assertThat(e.getCreditcardamount()).as("check creditcardamount").isEqualTo(actual.getCreditcardamount()))
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getOtherdetails()).as("check otherdetails").isEqualTo(actual.getOtherdetails()))
            .satisfies(e -> assertThat(e.getLmu()).as("check lmu").isEqualTo(actual.getLmu()))
            .satisfies(e -> assertThat(e.getLmd()).as("check lmd").isEqualTo(actual.getLmd()))
            .satisfies(e -> assertThat(e.getTermid()).as("check termid").isEqualTo(actual.getTermid()))
            .satisfies(e -> assertThat(e.getTermname()).as("check termname").isEqualTo(actual.getTermname()))
            .satisfies(e -> assertThat(e.getAccountno()).as("check accountno").isEqualTo(actual.getAccountno()))
            .satisfies(e -> assertThat(e.getAccountnumber()).as("check accountnumber").isEqualTo(actual.getAccountnumber()))
            .satisfies(e -> assertThat(e.getChequereturndate()).as("check chequereturndate").isEqualTo(actual.getChequereturndate()))
            .satisfies(e -> assertThat(e.getIsdeposit()).as("check isdeposit").isEqualTo(actual.getIsdeposit()))
            .satisfies(e -> assertThat(e.getDepositeddate()).as("check depositeddate").isEqualTo(actual.getDepositeddate()))
            .satisfies(
                e ->
                    assertThat(e.getChequestatuschangeddate())
                        .as("check chequestatuschangeddate")
                        .isEqualTo(actual.getChequestatuschangeddate())
            )
            .satisfies(
                e -> assertThat(e.getReturnchequesttledate()).as("check returnchequesttledate").isEqualTo(actual.getReturnchequesttledate())
            )
            .satisfies(e -> assertThat(e.getChequestatusid()).as("check chequestatusid").isEqualTo(actual.getChequestatusid()))
            .satisfies(e -> assertThat(e.getIsPdCheque()).as("check isPdCheque").isEqualTo(actual.getIsPdCheque()))
            .satisfies(e -> assertThat(e.getDepositdate()).as("check depositdate").isEqualTo(actual.getDepositdate()))
            .satisfies(e -> assertThat(e.getAccountid()).as("check accountid").isEqualTo(actual.getAccountid()))
            .satisfies(e -> assertThat(e.getAccountcode()).as("check accountcode").isEqualTo(actual.getAccountcode()))
            .satisfies(
                e -> assertThat(e.getBankdepositbankname()).as("check bankdepositbankname").isEqualTo(actual.getBankdepositbankname())
            )
            .satisfies(e -> assertThat(e.getBankdepositbankid()).as("check bankdepositbankid").isEqualTo(actual.getBankdepositbankid()))
            .satisfies(
                e ->
                    assertThat(e.getBankdepositbankbranchname())
                        .as("check bankdepositbankbranchname")
                        .isEqualTo(actual.getBankdepositbankbranchname())
            )
            .satisfies(
                e ->
                    assertThat(e.getBankdepositbankbranchid())
                        .as("check bankdepositbankbranchid")
                        .isEqualTo(actual.getBankdepositbankbranchid())
            )
            .satisfies(e -> assertThat(e.getReturnchequefine()).as("check returnchequefine").isEqualTo(actual.getReturnchequefine()))
            .satisfies(e -> assertThat(e.getCompanybankid()).as("check companybankid").isEqualTo(actual.getCompanybankid()))
            .satisfies(
                e -> assertThat(e.getIsbankreconciliation()).as("check isbankreconciliation").isEqualTo(actual.getIsbankreconciliation())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReceiptpaymentsdetailsUpdatableRelationshipsEquals(
        Receiptpaymentsdetails expected,
        Receiptpaymentsdetails actual
    ) {
        // empty method
    }
}
